name: Deploy Spring Boot API to GCP
permissions:
  contents: read
  checks: write
  security-events: write
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: us-central1
  GAR_LOCATION: us-central1
  REPOSITORY: springboot-gcp-api
  SERVICE: springboot-gcp-api-service
  
jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: ./mvnw clean test
      
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        project_id: ${{ env.PROJECT_ID }}

    - name: 'Configure Docker to use gcloud as a credential helper'
      run: |
        gcloud auth configure-docker gcr.io

    - name: Build application
      run: ./mvnw clean package -DskipTests

    - name: Build Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA .
        docker tag gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA gcr.io/$PROJECT_ID/$REPOSITORY:latest

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/$REPOSITORY:$GITHUB_SHA
        docker push gcr.io/$PROJECT_ID/$REPOSITORY:latest

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan \
          -var="project_id=$PROJECT_ID" \
          -var="region=$GCP_REGION" \
          -var="environment=${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}" \
          -out=tfplan

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      run: |
        cd terraform
        terraform apply -auto-approve tfplan

    - name: Get Cloud Run Service URL
      if: github.ref == 'refs/heads/main'
      id: get-url
      run: |
        cd terraform
        echo "service_url=$(terraform output -raw cloud_run_service_url)" >> $GITHUB_OUTPUT

    - name: Test deployment
      if: github.ref == 'refs/heads/main'
      run: |
        sleep 30
        curl -f ${{ steps.get-url.outputs.service_url }}/health || exit 1

    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ **Deployment Status**: Built and tested successfully!\n\nðŸ“¦ **Docker Image**: `gcr.io/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}:${{ github.sha }}`'
          })

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
